package {{.apiPackageName}}

import (
	"context"
	"encoding/json"
	"encoding/hex"
	"io/ioutil"
	"net/http"
	"strconv"
	"time"
	"unsafe"
	_ "github.com/google/uuid"

	"{{.daoFQPN}}"
	"{{.modelFQPN}}"

	"github.com/gin-gonic/gin"
	"github.com/julienschmidt/httprouter"
)

var (
    _ = time.Second // import time.Second for unknown usage in api
	crudEndpoints map[string]*CrudAPI
)

// CrudAPI describes requests available for tables in the database
type CrudAPI struct {
	Name            string           {{ .Config.JSONTag "name" }}
	CreateURL       string           {{ .Config.JSONTag "create_url" }}
	RetrieveOneURL  string           {{ .Config.JSONTag "retrieve_one_url" }}
	RetrieveManyURL string           {{ .Config.JSONTag "retrieve_many_url" }}
	UpdateURL       string           {{ .Config.JSONTag "update_url" }}
	DeleteURL       string           {{ .Config.JSONTag "delete_url" }}
	FetchDDLURL     string           {{ .Config.JSONTag "fetch_ddl_url" }}
	TableInfo       *{{.modelPackageName}}.TableInfo {{ .Config.JSONTag "table_info" }}
}

// PagedResults results for pages GetAll results.
type PagedResults struct {
    Page         int64 `json:"page" example:"0"`
    PageSize     int64 `json:"page_size" example:"20"`
    TotalRecords int64 `json:"total_records" example:"1234"`
    Results
}

// Results results
type Results struct {
    Version string      `json:"version" example:"1.0"`
    Data    interface{} `json:"data"`
}

// HTTPError example
type HTTPError struct {
	Code    int    `json:"{{ .Config.JSONFieldName "code" }}" example:"400"`
	Message string `json:"{{ .Config.JSONFieldName "message"}}" example:"status bad request"`
}

type ErrNotFound struct {
    Code    int    `json:"code" example:"404"`
    Message string `json:"message" example:"record not found"`
}

type ErrUnableToMarshalJSON struct {
    Code    int    `json:"code" example:"400"`
    Message string `json:"message" example:"json payload corrupt"`
}

type ErrUpdateFailed struct {
    Code    int    `json:"code" example:"400"`
    Message string `json:"message" example:"db update error"`
}

type ErrInsertFailed struct {
    Code    int    `json:"code" example:"400"`
    Message string `json:"message" example:"db insert error"`
}

type ErrDeleteFailed struct {
    Code    int    `json:"code" example:"400"`
    Message string `json:"message" example:"db delete error"`
}

type ErrBadParams struct {
    Code    int    `json:"code" example:"400"`
    Message string `json:"message" example:"bad params error"`
}

type ErrDefault struct {
    Code    int    `json:"code" example:"500"`
    Message string `json:"message" example:"internal server error"`
}

// ConfigRouter configure http.Handler router
func ConfigRouter() http.Handler {
	router := httprouter.New()
	{{range $tableName, $codeInfo := .tableInfos}}config{{$codeInfo.StructName}}Router(router)
    {{end}}
    {{/*
	router.GET("/ddl/:argID", GetDdl)
	router.GET("/ddl", GetDdlEndpoints)
	*/}}
	return router
}

// ConfigGinRouter configure gin router
func ConfigGinRouter(router gin.IRoutes) {
	{{range $tableName, $codeInfo := .tableInfos}}configGin{{$codeInfo.StructName}}Router(router)
	{{end}}
    {{/*
	router.GET("/ddl/:argID", ConverHttprouterToGin(GetDdl))
	router.GET("/ddl", ConverHttprouterToGin(GetDdlEndpoints))
	*/}}
	return
}

// ConverHttprouterToGin wrap httprouter.Handle to gin.HandlerFunc
func ConverHttprouterToGin(f httprouter.Handle) gin.HandlerFunc {
	return func(c *gin.Context) {
		var params httprouter.Params
		_len := len(c.Params)
		if _len == 0 {
			params = nil
		} else {
			params = ((*[1 << 10]httprouter.Param)(unsafe.Pointer(&c.Params[0])))[:_len]
		}

		f(c.Writer, c.Request, params)
	}
}

func initializeContext(r *http.Request) (ctx context.Context) {
	if ContextInitializer != nil {
		ctx = ContextInitializer(r)
	} else {
		ctx = r.Context()
	}
	return ctx
}

func ValidateRequest(ctx context.Context, r *http.Request, table string, action {{$.modelPackageName}}.Action) error {
	if RequestValidator != nil {
		return RequestValidator(ctx, r, table, action)
	}

	return nil
}

type RequestValidatorFunc func(ctx context.Context, r *http.Request, table string, action {{$.modelPackageName}}.Action) error

var RequestValidator RequestValidatorFunc

type ContextInitializerFunc func(r *http.Request) (ctx context.Context)

var ContextInitializer ContextInitializerFunc

func readInt(r *http.Request, param string, v int64) (int64, error) {
	p := r.FormValue(param)
	if p == "" {
		return v, nil
	}

	return strconv.ParseInt(p, 10, 64)
}

func writeResults(ctx context.Context, w http.ResponseWriter, v interface{}) {
    r := &Results{
        "{{.SwaggerInfo.Version}}",
        v,
    }
    writeJSON(ctx, w, r)
}

func writeJSON(ctx context.Context, w http.ResponseWriter, v interface{}) {
	data, _ := json.Marshal(v)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Cache-Control", "no-cache")
	w.Write(data)
}

func writeRowsAffected(ctx context.Context, w http.ResponseWriter, rowsAffected int64) {
    r := &Results{
        "{{.SwaggerInfo.Version}}",
        &struct {
            deletedRows int64 `json:"deleted_rows"`
        }{rowsAffected},
    }
    writeJSON(ctx, w, r)
}

func readJSON(r *http.Request, v interface{}) error {
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	return json.Unmarshal(buf, v)
}

func returnError(ctx context.Context, w http.ResponseWriter, r *http.Request, err error) {
    status := http.StatusOK
    switch err {
    case dao.ErrNotFound:
        status = http.StatusNotFound
    case dao.ErrUnableToMarshalJSON:
        status = http.StatusBadRequest
    case dao.ErrUpdateFailed:
        status = http.StatusBadRequest
    case dao.ErrInsertFailed:
        status = http.StatusBadRequest
    case dao.ErrDeleteFailed:
        status = http.StatusBadRequest
    case dao.ErrBadParams:
        status = http.StatusBadRequest
    default:
        status = http.StatusInternalServerError
    }
    er := HTTPError{
        Code:    status,
        Message: err.Error(),
    }

    SendJSON(w, r, er.Code, er)
}

// NewError example
func NewError(ctx *gin.Context, status int, err error) {
	er := HTTPError{
		Code:    status,
		Message: err.Error(),
	}
	ctx.JSON(status, er)
}

func parseUint8(ps httprouter.Params, key string) (uint8, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 8)
	if err != nil {
		return uint8(id), err
	}
	return uint8(id), err
}

func parseUint16(ps httprouter.Params, key string) (uint16, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 16)
	if err != nil {
		return uint16(id), err
	}
	return uint16(id), err
}

func parseUint32(ps httprouter.Params, key string) (uint32, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 32)
	if err != nil {
		return uint32(id), err
	}
	return uint32(id), err
}

func parseUint64(ps httprouter.Params, key string) (uint64, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		return uint64(id), err
	}
	return uint64(id), err
}

func parseInt(ps httprouter.Params, key string) (int, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		return -1, err
	}
	return int(id), err
}

func parseInt8(ps httprouter.Params, key string) (int8, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 8)
	if err != nil {
		return -1, err
	}
	return int8(id), err
}

func parseInt16(ps httprouter.Params, key string) (int16, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 16)
	if err != nil {
		return -1, err
	}
	return int16(id), err
}

func parseInt32(ps httprouter.Params, key string) (int32, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 32)
	if err != nil {
		return -1, err
	}
	return int32(id), err
}

func parseInt64(ps httprouter.Params, key string) (int64, error) {
	idStr := ps.ByName(key)
	id, err := strconv.ParseInt(idStr, 10, 54)
	if err != nil {
		return -1, err
	}
	return id, err
}

func parseString(ps httprouter.Params, key string) (string, error) {
	idStr := ps.ByName(key)
	return idStr, nil
}

func parseUUID(ps httprouter.Params, key string) (string, error) {
	idStr := ps.ByName(key)
	return idStr, nil
}

func parseBytes(ps httprouter.Params, key string) (string, error) {
	idStr := ps.ByName(key)
    hex, err := hex.DecodeString(idStr)
    return string(hex), err
}

{{/*
// GetDdl is a function to get table info for a table in the {{.DatabaseName}} database
// @Summary Get table info for a table in the {{.DatabaseName}} database by argID
// @Tags TableInfo
// @Description GetDdl is a function to get table info for a table in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
// @Param  argID path int true "id"
// @Success 200 {object} {{.apiPackageName}}.CrudAPI
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error"
// @Router /ddl/{argID} [get]
// @Security ApiKeyAuthorization
func GetDdl(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)

	argID := ps.ByName("argID")

	if err := ValidateRequest(ctx, r, "ddl", {{.modelPackageName}}.FetchDDL); err != nil {
		returnError(ctx, w, r, err)
		return
	}

	record, ok := crudEndpoints[argID]
	if !ok {
		returnError(ctx, w, r, fmt.Errorf("unable to find table: %s", argID) )
		return
	}

	writeJSON(ctx, w, record)
}

// GetDdlEndpoints is a function to get a list of ddl endpoints available for tables in the {{.DatabaseName}} database
// @Summary Gets a list of ddl endpoints available for tables in the {{.DatabaseName}} database
// @Tags TableInfo
// @Description GetDdlEndpoints is a function to get a list of ddl endpoints available for tables in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
// @Success 200 {object} {{.apiPackageName}}.CrudAPI
// @Router /ddl [get]
// @Security ApiKeyAuthorization
func GetDdlEndpoints(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)

	if err := ValidateRequest(ctx, r, "ddl", {{.modelPackageName}}.FetchDDL); err != nil {
		returnError(ctx, w, r, err)
		return
	}

	writeJSON(ctx, w, crudEndpoints)
}
*/}}

func init() {
	crudEndpoints = make(map[string]*CrudAPI)

	var tmp *CrudAPI
    {{ range $tableName, $tableInfo := .tableInfos }}
	tmp = &CrudAPI{
		Name: "{{$tableName}}",
		CreateURL: "/{{$tableInfo.StructName | toLower}}",
		RetrieveOneURL: "/{{$tableInfo.StructName | toLower}}",
		RetrieveManyURL: "/{{$tableInfo.StructName | toLower | pluralize }}",
		UpdateURL: "/{{$tableInfo.StructName | toLower}}",
		DeleteURL: "/{{$tableInfo.StructName | toLower}}",
		FetchDDLURL: "/ddl/{{$tableName}}",
	}

	tmp.TableInfo, _ = {{$.modelPackageName}}.GetTableInfo("{{$tableName}}")
	crudEndpoints["{{$tableName}}"] = tmp

	{{end}}
}
