{{define "api_add.go.tmpl"}}
// Add{{.StructName}} add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Add an record to {{.TableName}} table
// @Description add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
// @Param {{.StructName}} body {{.modelPackageName}}.{{.StructName}} true "Add {{.StructName}}"
// @Success 200 {object} {{.apiPackageName}}.Results{results={{.modelPackageName}}.{{.StructName}}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /entity/{{.TableName | singular | toLower}} [post]
// @Security ApiKeyAuthorization
func Add{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)
	{{.StructName | toLower | printf "%s_"}} := &{{.modelPackageName}}.{{.StructName}}{}

	if err := readJSON(r, {{.StructName | toLower | printf "%s_"}}); err != nil {
		returnError(ctx, w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}


   if err := {{.StructName | toLower | printf "%s_"}}.BeforeSave({{.daoPackageName}}.DB); err != nil {
      returnError(ctx, w, r, {{.daoPackageName}}.ErrBadParams)
   }

   {{.StructName | toLower | printf "%s_"}}.Prepare()

   if err := {{.StructName | toLower | printf "%s_"}}.Validate({{.modelPackageName}}.Create); err != nil {
      returnError(ctx, w, r, {{.daoPackageName}}.ErrBadParams)
      return
   }

	if err := ValidateRequest(ctx, r, "{{.TableName}}", {{.modelPackageName}}.Create); err != nil{
		returnError(ctx, w, r, err)
		return
	}

    var err error
	{{.StructName | toLower | printf "%s_"}}, _, err = {{.daoPackageName}}.Add{{.StructName}}(ctx, {{.StructName | toLower | printf "%s_"}})
	if err != nil {
		returnError(ctx, w, r, err)
		return
	}

	writeResults(ctx, w, {{.StructName | toLower | printf "%s_"}})
}
{{end}}
