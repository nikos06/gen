{{define "api_getall.go.tmpl"}}
{{/* // @Param   order    query    string  false        "db sort order column" */}}
// GetAll{{.StructName | pluralize}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Get list of {{.StructName}}
// @Tags {{.StructName}}
// @Description GetAll{{.StructName | pluralize}} is a handler to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Produce  json
// @Param   page     query    int     false        "page requested (defaults to 1)"
// @Param   pageSize query    int     false        "number of records in a page  (defaults to 20)"
// @Success 200 {object} {{.apiPackageName}}.PagedResults{data=[]{{.modelPackageName}}.{{.StructName}}}
// @Failure 400 {object} {{.apiPackageName}}.ErrBadParams
// @Failure 404 {object} {{.apiPackageName}}.ErrNotFound "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error"
// @Failure 500 {object} {{.apiPackageName}}.ErrDefault "Unknown error - returns HTTP 500 internal server error"
// @Router /list/{{.TableName | pluralize | toLower}} [get]
// @Security ApiKeyAuthorization
func GetAll{{.StructName | pluralize}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)
    page, err := readInt(r, "page", 1)
	if err != nil || page < 1 {
		returnError(ctx, w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}

	pageSize, err := readInt(r, "pageSize", 20)
	if err != nil || pageSize <= 0 {
		returnError(ctx, w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}

	order := r.FormValue("order")

	if err := ValidateRequest(ctx, r, "{{.TableName}}", {{.modelPackageName}}.RetrieveMany); err != nil{
		returnError(ctx, w, r, err)
		return
	}

    records, totalRows, err :=  {{.daoPackageName}}.GetAll{{.StructName | pluralize}}(ctx, int(page), int(pageSize), order)
	if err != nil {
	    returnError(ctx, w, r, err)
		return
	}

    result := &PagedResults{
        Page: page,
        PageSize: pageSize,
        TotalRecords: totalRows,
        Results: Results{
            Data: records,
            Version: "{{.SwaggerInfo.Version}}",
        },
    }
    writeJSON(ctx, w, result)
}
{{end}}
