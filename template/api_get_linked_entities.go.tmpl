{{define "api_get_linked_entities.go.tmpl"}}
{{ if or (eq .TableName "mailing_lists") (eq .TableName "media") (eq .TableName "services") (eq .TableName "contacts") (eq .TableName "businesses") }}
// Get{{.StructName}}LinkedEntities is a function to get a list of records of a {{.TableName}} linked entity
// @Summary Get a list of records of a {{.TableName}} linked entity
// @Tags {{.StructName}}
// @Description Get{{.StructName}}LinkedEntities is a function to get a list of records of a {{.TableName}} linked entity
// @Produce  json
// @Success 200 {object} {{.apiPackageName}}.PagedResults{}
// @Failure 400 {object} {{.apiPackageName}}.ErrBadParams
// @Failure 404 {object} {{.apiPackageName}}.ErrNotFound "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error"
// @Failure 500 {object} {{.apiPackageName}}.ErrDefault "Unknown error - returns HTTP 500 internal server error"
// @Param   argID    path    string  true        "ID"
// @Param   linkID   path    string  true        "linked entity"
// @Param   expand   query   string  false       "expand properties, ex: 'business,contact'. special value '_all' expands all properties"
// @Router /list/{{.TableName | singular | toLower}}/{argID}/{linkID} [get]
// @Security ApiKeyAuthorization
func Get{{.StructName}}LinkedEntities(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
    ctx := initializeContext(r)

    argID, err := parseString(ps, "argID")
    if err != nil {
        api_utils.ReturnError(w, r, http.StatusBadRequest, fmt.Errorf("incorrect ID value: %s", err))
        return
    }

    linkID, err := parseString(ps, "linkID")
    if err != nil {
        api_utils.ReturnError(w, r, http.StatusBadRequest, fmt.Errorf("incorrect link ID value: %s", err))
        return
    }

    expand, err := readString(r, "expand", "")
    if err != nil {
        api_utils.ReturnError(w, r, http.StatusBadRequest, err)
        return
    }

    if err := ValidateRequest(ctx, r, "{{.TableName}}", {{.modelPackageName}}.RetrieveOne); err != nil{
        api_utils.ReturnError(w, r, http.StatusBadRequest, err)
        return
    }

    records, totalRows, err := {{.daoPackageName}}.Get{{.StructName}}LinkedEntities(ctx, argID, linkID, expand)
    if err != nil {
        daoReturnError(w, r, err)
        return
    }

    result := &PagedResults{
        Page: 0,
        PageSize: totalRows,
        TotalRecords: totalRows,
        Results: Results{
            Data: records,
            Version: "{{.SwaggerInfo.Version}}",
        },
    }
    writeJSON(ctx, w, result)
}
{{end}}
{{end}}
